"""
easy_migrate allows you to 
make it a little easier a quicker to migrate your
apps.

$ python manage.py schemamigration app --init
or
$ python manage.py schemamigration app --auto

$ python manage.py migrate app
"""
import sys, os

from south import migration
from south.db import DEFAULT_DB_ALIAS

try:
    from south.exceptions import NoMigrations
except ImportError:
    sys.stdout.write("Could not import south.\n")
    exit(1)

from south.management.commands.datamigration import Command as DataCommand

from subprocess import call, check_call, Popen
try: 
    from django.db import models
except:
    sys.stdout.write("Could not import django.\n")
    exit(1)
    
from django.db.models import loading
from optparse import make_option
from django.core.exceptions import ImproperlyConfigured

class Command(DataCommand):
    option_list = DataCommand.option_list + (
        make_option('--add-model', action='append', 
                                dest='added_model_list', type='string',
            help='Generate a Create Table migration for the specified \
model.  Add multiple models to this migration with \
subsequent --model parameters.'),
                                             
        make_option('--add-field', action='append', 
                                dest='added_field_list', type='string',
            help='Generate an Add Column migration for the specified \
modelname.fieldname - you can use this multiple times to add more than \
one column.'),
                                             
        make_option('--fake', action='store_true', 
                                dest='fake', default=False,
        help="Doesn't execute the SQL generated by the db methods, and \
doesn't store a record that the migration(s) occurred. Useful to \
test migrations before applying them."),
                                             
        make_option('--add-index', action='append', 
                                dest='added_index_list', type='string',
            help='Generate an Add Index migration for the specified \
modelname.fieldname - you can use this multiple times to add more than \
one column.'),
       make_option('--db-dry-run', action='store_true', dest='db_dry_run', default=False,
            help="Doesn't execute the SQL generated by the db methods, and doesn't store a record that the migration(s) occurred. Useful to test migrations before applying them."),
                                             
        make_option('--initial', action='store_true', 
                                dest='initial', default=False,
            help='Generate the initial schema for the app.'),
                                             
        make_option('--auto', action='store_true', 
                                dest='auto', default=False,
            help='Attempt to automatically detect differences from the \
last migration.'),
                                             
        make_option('--empty', action='store_true', dest='empty', default=False,
            help='Make a blank migration.'),
    )
    help = "Creates a new template schema migration for the given app"
    usage_str = "Usage: ./manage.py easy_migrate appname appname ..."
    
    def get_models(self,app):
        r =  loading.get_models(app)
        return r
    
    def app_label_to_app_module(self, app_label):
        """
        Given the app label, returns the module of the app itself 
        (unlike models.get_app,
        which returns the models module)
        """
        # Get the models module
        app = models.get_app(app_label)
        module_name = ".".join(app.__name__.split(".")[:-1])
        try:
            module = sys.modules[module_name]
        except KeyError:
            __import__(module_name, {}, {}, [''])
            module = sys.modules[module_name]
        return module, app
    
    def say(self, *args):
        for x in args:
            sys.stdout.write(x) 
        sys.stdout.write('\n')
    
    def migrations_exist(self, module):
        p = os.path.join(module.__path__[0], 'migrations') 
        return os.path.exists(p)
    
    def handle(self, *args, **options):
        
        
        _auto = options.get('auto', False)
        # Loop through all give apps 
        # Or fail as no apps are supplied.
        if len(args) <= 0:
            self.say("No apps supplied")
            exit(1)
            
        for a in args:
            try:
                module, app = self.app_label_to_app_module(a)
                
                #print "Objects", module, app
            except ImproperlyConfigured as (e):
                module, app = None, None
                self.say("App '%s' could not be found." % a)
            
            if app:
                me = self.migrations_exist(module)
                if me:
                    self.say("Auto migrations for %s" % a)
                    _auto = True
                else:
                    self.say("New migrations for %s" % a)
                    _auto = False
                    
                if _auto == True:
                    _initial = False
                else:
                    _initial = True
                from django.core import management
                
                options.update({'initial':_initial, 
                   'auto':_auto})
                p = str(a)
                
                try:
                    management.call_command('schemamigration', p, **options)
                finally:
                    from south.migration import Migration, Migrations
                    # Migrate each app
                    
                    if a:
                        try:
                            
                            apps = [Migrations(a)]
                            _s = 's'
                            if len(apps) == 1: _s = ''
                            print "Migrating %s app%s in '%s' " % (len(apps), _s,  a)
                             
                            for app in apps:
                                result = migration.migrate_app(
                                    apps,
                                    target_name = None,
                                    fake = options.get('fake', False),
                                    db_dry_run = options.get('db_dry_run', False),
                                    verbosity = int(options.get('verbosity', 0)),
                                    interactive = options.get('interactive', True),
                                    load_initial_data = not options.get('no_initial_data', False),
                                    merge = options.get('merge', True),
                                    skip = False,
                                    database = options.get('database', DEFAULT_DB_ALIAS),
                                    delete_ghosts = options.get('delete_ghosts', False),
                                    ignore_ghosts = options.get('ignore_ghosts', False),
                                )
                            if result is False:
                                sys.exit(1) # Migration failed, so the command fails.
                        except NoMigrations:
                            print "The app '%s' does not appear to use migrations." % app
                            print "./manage.py migrate " + self.args
                            return
                    else:
                        apps = list(migration.all_migrations())
            
        
    